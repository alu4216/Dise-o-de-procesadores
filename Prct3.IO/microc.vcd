$date
	Mon Mar 24 15:10:05 2014
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module procesador_tb $end
$var reg 1 ! clkt $end
$var reg 8 " datos_inAt [7:0] $end
$var reg 8 # datos_inBt [7:0] $end
$var reg 8 $ datos_inCt [7:0] $end
$var reg 8 % datos_inDt [7:0] $end
$var reg 1 & resett $end
$scope module proc $end
$var wire 1 ' clk $end
$var wire 8 ( datos_inA [7:0] $end
$var wire 8 ) datos_inB [7:0] $end
$var wire 8 * datos_inC [7:0] $end
$var wire 8 + datos_inD [7:0] $end
$var wire 1 , fin $end
$var wire 3 - op [2:0] $end
$var wire 6 . opcode [5:0] $end
$var wire 1 / reset $end
$var wire 2 0 s_e [1:0] $end
$var wire 1 1 s_inc $end
$var wire 1 2 s_inm $end
$var wire 1 3 s_mux5 $end
$var wire 1 4 s_r $end
$var wire 1 5 s_rel $end
$var wire 1 6 we3 $end
$var wire 1 7 we3t $end
$var wire 1 8 we_s_r_1 $end
$var wire 1 9 we_s_r_2 $end
$var wire 1 : we_s_r_3 $end
$var wire 1 ; we_s_r_4 $end
$var wire 1 < z $end
$scope module micro $end
$var wire 8 = alusal [7:0] $end
$var wire 1 ' clk $end
$var wire 16 > datos [15:0] $end
$var wire 8 ? datos_inA [7:0] $end
$var wire 8 @ datos_inB [7:0] $end
$var wire 8 A datos_inC [7:0] $end
$var wire 8 B datos_inD [7:0] $end
$var wire 8 C datos_outA [7:0] $end
$var wire 8 D datos_outB [7:0] $end
$var wire 8 E datos_outC [7:0] $end
$var wire 8 F datos_outD [7:0] $end
$var wire 10 G dir [9:0] $end
$var wire 10 H mux1 [9:0] $end
$var wire 3 I op [2:0] $end
$var wire 6 J opcode [5:0] $end
$var wire 8 K rd1 [7:0] $end
$var wire 8 L rd2 [7:0] $end
$var wire 1 / reset $end
$var wire 2 M s_e [1:0] $end
$var wire 1 1 s_inc $end
$var wire 1 2 s_inm $end
$var wire 1 3 s_mux5 $end
$var wire 1 4 s_r $end
$var wire 1 5 s_rel $end
$var wire 8 N sal_mux3 [7:0] $end
$var wire 8 O sal_mux4 [7:0] $end
$var wire 8 P sal_mux5 [7:0] $end
$var wire 10 Q sal_mux6 [9:0] $end
$var wire 10 R sumsal [9:0] $end
$var wire 8 S wd3 [7:0] $end
$var wire 1 7 we3 $end
$var wire 1 8 we_s_r_1 $end
$var wire 1 9 we_s_r_2 $end
$var wire 1 : we_s_r_3 $end
$var wire 1 ; we_s_r_4 $end
$var wire 1 < z $end
$var wire 1 T z_out $end
$var wire 1 U z_z $end
$scope module memo $end
$var wire 10 V a [9:0] $end
$var wire 1 ' clk $end
$var wire 16 W rd [15:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ' clk $end
$var wire 10 X d [9:0] $end
$var wire 1 / reset $end
$var reg 10 Y q [9:0] $end
$upscope $end
$scope module suma $end
$var wire 10 Z a [9:0] $end
$var wire 10 [ b [9:0] $end
$var wire 10 \ y [9:0] $end
$upscope $end
$scope module muxizq $end
$var wire 10 ] d0 [9:0] $end
$var wire 10 ^ d1 [9:0] $end
$var wire 1 1 s $end
$var wire 10 _ y [9:0] $end
$upscope $end
$scope module banco $end
$var wire 1 ' clk $end
$var wire 4 ` ra1 [3:0] $end
$var wire 4 a ra2 [3:0] $end
$var wire 8 b rd1 [7:0] $end
$var wire 8 c rd2 [7:0] $end
$var wire 4 d wa3 [3:0] $end
$var wire 8 e wd3 [7:0] $end
$var wire 1 7 we3 $end
$upscope $end
$scope module alualu $end
$var wire 8 f a [7:0] $end
$var wire 8 g b [7:0] $end
$var wire 3 h op [2:0] $end
$var wire 8 i y [7:0] $end
$var wire 1 U zero $end
$var reg 8 j s [7:0] $end
$upscope $end
$scope module muxdch $end
$var wire 8 k d0 [7:0] $end
$var wire 8 l d1 [7:0] $end
$var wire 1 2 s $end
$var wire 8 m y [7:0] $end
$upscope $end
$scope module reg_z $end
$var wire 1 ' clk $end
$var wire 3 n op [2:0] $end
$var wire 1 U z_in $end
$var reg 1 o z_out $end
$upscope $end
$scope module regA $end
$var wire 1 ' clk $end
$var wire 8 p datos_in [7:0] $end
$var wire 1 8 we_s_r_1 $end
$var reg 8 q datos_out [7:0] $end
$upscope $end
$scope module regB $end
$var wire 1 ' clk $end
$var wire 8 r datos_in [7:0] $end
$var wire 1 9 we_s_r_2 $end
$var reg 8 s datos_out [7:0] $end
$upscope $end
$scope module regC $end
$var wire 1 ' clk $end
$var wire 8 t datos_in [7:0] $end
$var wire 1 : we_s_r_3 $end
$var reg 8 u datos_out [7:0] $end
$upscope $end
$scope module regD $end
$var wire 1 ' clk $end
$var wire 8 v datos_in [7:0] $end
$var wire 1 ; we_s_r_4 $end
$var reg 8 w datos_out [7:0] $end
$upscope $end
$scope module mux_3 $end
$var wire 8 x datos_in_memprog [7:0] $end
$var wire 8 y datos_in_regfile [7:0] $end
$var wire 8 z datos_out [7:0] $end
$var wire 1 4 s_r $end
$upscope $end
$scope module mux_5 $end
$var wire 8 { datos_in_memprog [7:0] $end
$var wire 8 | datos_in_mux4 [7:0] $end
$var wire 8 } datos_out [7:0] $end
$var wire 1 3 s_mux5 $end
$upscope $end
$scope module mux_4 $end
$var wire 8 ~ datos_in_A [7:0] $end
$var wire 8 !" datos_in_B [7:0] $end
$var wire 8 "" datos_in_C [7:0] $end
$var wire 8 #" datos_in_D [7:0] $end
$var wire 2 $" s_e [1:0] $end
$var reg 8 %" datos_out [7:0] $end
$upscope $end
$scope module mux_6 $end
$var wire 10 &" dato [9:0] $end
$var wire 10 '" datos_in [9:0] $end
$var wire 10 (" datos_out [9:0] $end
$var wire 1 5 s_rel $end
$upscope $end
$upscope $end
$scope module uc1 $end
$var wire 1 ' clk $end
$var wire 6 )" opcode [5:0] $end
$var wire 1 / reset $end
$var wire 1 < z $end
$var reg 1 *" fin $end
$var reg 3 +" op [2:0] $end
$var reg 2 ," s_e [1:0] $end
$var reg 1 -" s_inc $end
$var reg 1 ." s_inm $end
$var reg 1 /" s_mux5 $end
$var reg 1 0" s_r $end
$var reg 1 1" s_rel $end
$var reg 1 2" we3 $end
$var reg 1 3" we_s_r_1 $end
$var reg 1 4" we_s_r_2 $end
$var reg 1 5" we_s_r_3 $end
$var reg 1 6" we_s_r_4 $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
06"
05"
04"
03"
12"
11"
00"
0/"
1."
1-"
b0 ,"
b0 +"
0*"
b1110 )"
b1 ("
b100 '"
b1 &"
b1 %"
b0 $"
bx #"
bx ""
bx !"
b1 ~
b1 }
b1 |
b10000 {
b11111111 z
b11111111 y
b1 x
bx w
b11111111 v
bx u
b11111111 t
bx s
b11111111 r
bx q
b11111111 p
xo
b0 n
b1 m
b1 l
b0 k
b0 j
b0 i
b0 h
b11111111 g
b0 f
b1 e
b0 d
b11111111 c
b0 b
b1 a
b0 `
b1 _
b1 ^
b100 ]
b1 \
b1 [
b0 Z
b0 Y
b1 X
b100001110 W
b0 V
1U
xT
b1 S
b1 R
b1 Q
b1 P
b1 O
b11111111 N
b0 M
b11111111 L
b0 K
b1110 J
b0 I
b1 H
b0 G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
b1 ?
b100001110 >
b0 =
x<
0;
0:
09
08
z7
16
15
04
03
12
11
b0 0
1/
b1110 .
b0 -
0,
bx +
bx *
bx )
b1 (
1'
1&
bx %
bx $
bx #
b1 "
1!
$end
#500
0&
0/
#3000
0!
0'
#6000
b11 Q
b11 [
b11 ("
b0 S
b0 e
b0 m
01"
05
02"
06
0."
02
b0 N
b0 p
b0 r
b0 t
b0 v
b0 z
b0 L
b0 c
b0 g
b0 y
b100 H
b100 X
b100 _
b1010 .
b1010 J
b1010 )"
b11 '"
b1100 {
b0 x
b0 a
b1100 `
b11 ]
1o
1T
1<
b1 Y
b100 R
b100 \
b100 ^
b11001010 >
b11001010 W
b1 G
b1 V
b1 Z
1!
1'
#9000
0!
0'
#12000
11"
15
12"
16
b1 Q
b1 [
b1 ("
b101 H
b101 X
b101 _
b0 .
b0 J
b0 )"
b10000000 '"
b0 {
b100000 x
b10 d
b0 `
b10000000 ]
b100 Y
b101 R
b101 \
b101 ^
b10000000000000 >
b10000000000000 W
b100 G
b100 V
b100 Z
1!
1'
#15000
0!
0'
#18000
b110 H
b110 X
b110 _
b0 '"
b0 x
b0 d
b0 ]
b101 Y
b110 R
b110 \
b110 ^
b0 >
b0 W
b101 G
b101 V
b101 Z
1!
1'
#21000
0!
0'
#24000
b111 H
b111 X
b111 _
b110 Y
b111 R
b111 \
b111 ^
b110 G
b110 V
b110 Z
1!
1'
#27000
0!
0'
#30000
b1000 H
b1000 X
b1000 _
b111 Y
b1000 R
b1000 \
b1000 ^
b111 G
b111 V
b111 Z
1!
1'
