$date
	Thu Mar 20 18:44:41 2014
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module micro_tb $end
$var wire 1 ! fint $end
$var wire 6 " opcodet [5:0] $end
$var wire 3 # opt [2:0] $end
$var wire 1 $ s_inct $end
$var wire 1 % s_inmt $end
$var wire 1 & we3t $end
$var wire 1 ' zt $end
$var reg 1 ( clkt $end
$var reg 1 ) resett $end
$scope module micro $end
$var wire 8 * alusal [7:0] $end
$var wire 1 + clk $end
$var wire 16 , datos [15:0] $end
$var wire 10 - dir [9:0] $end
$var wire 10 . mux1 [9:0] $end
$var wire 3 / op [2:0] $end
$var wire 6 0 opcode [5:0] $end
$var wire 8 1 rd1 [7:0] $end
$var wire 8 2 rd2 [7:0] $end
$var wire 1 3 reset $end
$var wire 1 $ s_inc $end
$var wire 1 % s_inm $end
$var wire 10 4 sumsal [9:0] $end
$var wire 8 5 wd3 [7:0] $end
$var wire 1 & we3 $end
$var wire 1 ' z $end
$var wire 1 6 z_out $end
$var wire 1 7 z_z $end
$scope module memo $end
$var wire 10 8 a [9:0] $end
$var wire 1 + clk $end
$var wire 16 9 rd [15:0] $end
$upscope $end
$scope module PC $end
$var wire 1 + clk $end
$var wire 10 : d [9:0] $end
$var wire 1 3 reset $end
$var reg 10 ; q [9:0] $end
$upscope $end
$scope module suma $end
$var wire 10 < a [9:0] $end
$var wire 10 = b [9:0] $end
$var wire 10 > y [9:0] $end
$upscope $end
$scope module muxizq $end
$var wire 10 ? d0 [9:0] $end
$var wire 10 @ d1 [9:0] $end
$var wire 1 $ s $end
$var wire 10 A y [9:0] $end
$upscope $end
$scope module banco $end
$var wire 1 + clk $end
$var wire 4 B ra1 [3:0] $end
$var wire 4 C ra2 [3:0] $end
$var wire 8 D rd1 [7:0] $end
$var wire 8 E rd2 [7:0] $end
$var wire 4 F wa3 [3:0] $end
$var wire 8 G wd3 [7:0] $end
$var wire 1 & we3 $end
$upscope $end
$scope module alualu $end
$var wire 8 H a [7:0] $end
$var wire 8 I b [7:0] $end
$var wire 3 J op [2:0] $end
$var wire 8 K y [7:0] $end
$var wire 1 7 zero $end
$var reg 8 L s [7:0] $end
$upscope $end
$scope module muxdch $end
$var wire 8 M d0 [7:0] $end
$var wire 8 N d1 [7:0] $end
$var wire 1 % s $end
$var wire 8 O y [7:0] $end
$upscope $end
$scope module reg_z $end
$var wire 1 + clk $end
$var wire 3 P op [2:0] $end
$var wire 1 7 z_in $end
$var reg 1 Q z_out $end
$upscope $end
$upscope $end
$scope module uc1 $end
$var wire 1 + clk $end
$var wire 6 R opcode [5:0] $end
$var wire 1 3 reset $end
$var wire 1 ' z $end
$var reg 1 S fin $end
$var reg 3 T op [2:0] $end
$var reg 1 U s_inc $end
$var reg 1 V s_inm $end
$var reg 1 W we3 $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1W
0V
1U
b10 T
0S
b10010 R
xQ
b10 P
b0 O
b1 N
b0 M
b0 L
b0 K
b10 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b1 B
b1 A
b1 @
b0 ?
b1 >
b1 =
b0 <
b0 ;
b1 :
b10010 9
b0 8
17
x6
b0 5
b1 4
13
b0 2
b0 1
b10010 0
b10 /
b1 .
b0 -
b10010 ,
1+
b0 *
1)
1(
x'
1&
0%
1$
b10 #
b10010 "
0!
$end
#500
0)
03
#3000
0(
0+
#6000
0U
0$
0W
0&
b10 .
b10 :
b10 A
b101011 "
b101011 0
b101011 R
b1010 N
b1010 B
b10 ?
1Q
16
1'
b1 ;
b10 4
b10 >
b10 @
b10101011 ,
b10101011 9
b1 -
b1 8
b1 <
1(
1+
#9000
0(
0+
#12000
1S
1!
b0 T
b0 #
b0 /
b0 J
b0 P
b1 .
b1 :
b1 A
b111111 "
b111111 0
b111111 R
b111 N
b111 B
b1 ?
b10 ;
b11 4
b11 >
b11 @
b1111111 ,
b1111111 9
b10 -
b10 8
b10 <
1(
1+
#15000
0(
0+
#18000
0S
0!
b10 .
b10 :
b10 A
b101011 "
b101011 0
b101011 R
b1010 N
b1010 B
b10 ?
b1 ;
b10 4
b10 >
b10 @
b10101011 ,
b10101011 9
b1 -
b1 8
b1 <
1(
1+
#21000
0(
0+
#24000
1S
1!
b1 .
b1 :
b1 A
b111111 "
b111111 0
b111111 R
b111 N
b111 B
b1 ?
b10 ;
b11 4
b11 >
b11 @
b1111111 ,
b1111111 9
b10 -
b10 8
b10 <
1(
1+
#27000
0(
0+
#30000
0S
0!
b10 .
b10 :
b10 A
b101011 "
b101011 0
b101011 R
b1010 N
b1010 B
b10 ?
b1 ;
b10 4
b10 >
b10 @
b10101011 ,
b10101011 9
b1 -
b1 8
b1 <
1(
1+
